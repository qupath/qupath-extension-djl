plugins {
  id 'java-library'
  id 'maven-publish'
//  id 'com.github.johnrengelman.shadow' version '8.1.1'
  id 'org.openjfx.javafxplugin' version '0.1.0'
  // Version in settings.gradle
  id 'org.bytedeco.gradle-javacpp-platform'
}

ext.moduleName = 'qupath.extension.djl'
ext.qupathVersion = gradle.ext.qupathVersion

description = 'QuPath extension to use Deep Java Library'
version = "0.3.0-SNAPSHOT"
group = 'io.github.qupath'

def djlVersion = libs.versions.deepJavaLibrary.get()

repositories {
	// Use this only for local development!
//  mavenLocal()

	mavenCentral()

	maven {
		url "https://maven.scijava.org/content/repositories/releases"
	}

	maven {
		url "https://maven.scijava.org/content/repositories/snapshots"
	}

}


dependencies {
	implementation "io.github.qupath:qupath-gui-fx:${qupathVersion}"
	implementation libs.qupath.fxtras

    // These are included in QuPath distributions
	implementation libs.bundles.logging
	implementation libs.snakeyaml
    
    implementation "ai.djl:api:$djlVersion"
    
    testImplementation libs.junit
//    testRuntimeOnly libs.junit.engine

}

processResources {
  from ("${projectDir}/LICENSE") {
    into 'META-INF/licenses/'
  }
}

tasks.register("copyDependencies", Copy) {
    description "Copy dependencies into the build directory for use elsewhere"
    group "QuPath"

    from configurations.default
    into 'build/libs'
}

/*
 * Ensure Java 17 compatibility
 */
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    if (project.properties['sources'])
	    withSourcesJar()
    if (project.properties['javadocs'])
	    withJavadocJar()

}

/*
 * Set encoding
 */
tasks.named('compileJava') {
	options.encoding = 'UTF-8'
}

/*
 * Manifest info
 */
jar {
	manifest {
		attributes("Implementation-Title": project.name,
				   "Implementation-Version": archiveVersion,
				   "Automatic-Module-Name": "io.github." + moduleName)
	}
}

/*
 * Create javadocs for all modules/packages in one place.
 * Use -PstrictJavadoc=true to fail on error with doclint (which is rather strict).
 */
tasks.withType(Javadoc) {
	options.encoding = 'UTF-8'
	def strictJavadoc = findProperty('strictJavadoc')
	if (!strictJavadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
	}
}

/*
 * Avoid 'Entry .gitkeep is a duplicate but no duplicate handling strategy has been set.'
 * when using withSourcesJar()
 */
tasks.withType(org.gradle.jvm.tasks.Jar) {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

tasks.named('test') {
    useJUnitPlatform()
}


publishing {
	repositories {
		maven {
			name = "SciJava"
			def releasesRepoUrl = uri("https://maven.scijava.org/content/repositories/releases")
			def snapshotsRepoUrl = uri("https://maven.scijava.org/content/repositories/snapshots")
			// Use gradle -Prelease publish
			url = project.hasProperty('release') ? releasesRepoUrl : snapshotsRepoUrl
			credentials {
				username = System.getenv("MAVEN_USER")
				password = System.getenv("MAVEN_PASS")
			}
		}
	}

	publications {
		mavenJava(MavenPublication) {
			from components.java

			pom {
				licenses {
					license {
						name = 'Apache License v2.0'
						url = 'http://www.apache.org/licenses/LICENSE-2.0'
					}
				}
			}
		}
	}
}
